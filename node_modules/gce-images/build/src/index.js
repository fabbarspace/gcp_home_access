"use strict";
// Copyright 2018 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
const arrify = require("arrify");
const google_auth_library_1 = require("google-auth-library");
class GCEImages {
    constructor(config = {}) {
        this.apiEndpoint = config.apiEndpoint || 'compute.googleapis.com';
        config.scopes = ['https://www.googleapis.com/auth/compute'];
        this._auth = config.authClient || new google_auth_library_1.GoogleAuth(config);
        const projectsPath = `https://${this.apiEndpoint}/compute/v1/projects`;
        this.OS_URLS = {
            centos: `${projectsPath}/centos-cloud/global/images`,
            'container-vm': `${projectsPath}/cos-cloud/global/images`,
            coreos: `${projectsPath}/coreos-cloud/global/images`,
            debian: `${projectsPath}/debian-cloud/global/images`,
            redhat: `${projectsPath}/rhel-cloud/global/images`,
            opensuse: `${projectsPath}/opensuse-cloud/global/images`,
            suse: `${projectsPath}/suse-cloud/global/images`,
            ubuntu: `${projectsPath}/ubuntu-os-cloud/global/images`,
            windows: `${projectsPath}/windows-cloud/global/images`,
        };
        this.OS_TO_URL = {
            centos: this.OS_URLS.centos,
            'centos-cloud': this.OS_URLS.centos,
            'container-vm': this.OS_URLS['container-vm'],
            'google-containers': this.OS_URLS['container-vm'],
            cos: this.OS_URLS['container-vm'],
            coreos: this.OS_URLS.coreos,
            'coreos-cloud': this.OS_URLS.coreos,
            debian: this.OS_URLS.debian,
            'debian-cloud': this.OS_URLS.debian,
            rhel: this.OS_URLS.redhat,
            'rhel-cloud': this.OS_URLS.redhat,
            redhat: this.OS_URLS.redhat,
            opensuse: this.OS_URLS.opensuse,
            'opensuse-cloud': this.OS_URLS.opensuse,
            suse: this.OS_URLS.suse,
            'suse-cloud': this.OS_URLS.suse,
            ubuntu: this.OS_URLS.ubuntu,
            'ubuntu-cloud': this.OS_URLS.ubuntu,
            'ubuntu-os-cloud': this.OS_URLS.ubuntu,
            windows: this.OS_URLS.windows,
            'windows-cloud': this.OS_URLS.windows,
        };
    }
    async getProjectId() {
        return this._auth.getProjectId();
    }
    getAll(optsOrCb, cb) {
        const { options, callback } = this._parseArguments(optsOrCb, cb);
        if (callback) {
            this.getAllAsync(options).then(r => callback(null, r), callback);
        }
        else {
            return this.getAllAsync(options);
        }
    }
    async getAllAsync(opts) {
        const osNamesToImages = new Map();
        await Promise.all(opts.osNames.map(async (name) => {
            const singleOsOptions = Object.assign({}, opts, { osNames: [name] });
            osNamesToImages.set(name, (await this._getAllByOS(singleOsOptions)) || []);
        }));
        const result = opts.osNames.length === 1
            ? osNamesToImages.get(opts.osNames[0])
            : Array.from(osNamesToImages).reduce((obj, [key, value]) => {
                obj[key] = value;
                return obj;
            }, {});
        return result;
    }
    getLatest(optsOrCb, cb) {
        const { options, callback } = this._parseArguments(optsOrCb, cb);
        if (callback) {
            this.getLatestAsync(options).then(r => callback(null, r), callback);
        }
        else {
            return this.getLatestAsync(options);
        }
    }
    async getLatestAsync(opts) {
        const images = await this.getAllAsync(opts);
        let image;
        if (Array.isArray(images)) {
            [image] = images.sort(this._sortNewestFirst);
        }
        else {
            image = {};
            for (const name in images) {
                if (images[name]) {
                    image[name] = images[name].sort(this._sortNewestFirst)[0];
                }
            }
        }
        return image;
    }
    async _getAllByOS(options) {
        const osParts = this._parseOsInput(options.osNames[0]);
        const reqOpts = {
            url: osParts.url,
            params: {},
        };
        if (osParts.version.length > 0) {
            reqOpts.params.filter =
                'name eq ' + [osParts.name, osParts.version].join('-') + '.*';
        }
        const resp = await this._auth.request(reqOpts);
        let images = resp.data.items || [];
        if (!options.deprecated) {
            images = images.filter(this._filterDeprecated);
        }
        if (images.length === 0) {
            throw new Error('Could not find a suitable image.');
        }
        return images;
    }
    // tslint:disable-next-line no-any
    _parseArguments(options, callback) {
        const defaultOptions = {
            deprecated: false,
            osNames: Object.keys(this.OS_URLS),
        };
        const parsedArguments = {
            options,
            callback,
        };
        if (typeof options === 'string') {
            parsedArguments.options = {
                osNames: [options],
            };
        }
        if (typeof options === 'function') {
            parsedArguments.callback = options;
        }
        parsedArguments.options = Object.assign(defaultOptions, parsedArguments.options);
        parsedArguments.options.osNames = arrify(parsedArguments.options.osNames);
        return parsedArguments;
    }
    _parseOsInput(os) {
        const osParts = {
            name: '',
            version: '',
            url: '',
        };
        let project;
        let hasProject = false;
        if (this.OS_TO_URL[os]) {
            osParts.name = os;
        }
        else {
            hasProject = /\//.test(os);
            if (hasProject) {
                const projectAndOs = os.split('/');
                project = projectAndOs[0];
                os = projectAndOs[1];
            }
            os.split('-').forEach(part => {
                const hasName = osParts.name.length > 0;
                const hasVersion = osParts.version.length > 0;
                // Basically, if one of the parts of this name isn't 'cloud' or 'os',
                // consider it part of the version.
                switch (part) {
                    case 'cloud':
                    case 'os':
                        if (!hasVersion) {
                            osParts.name += !hasName ? part : '-' + part;
                            break;
                        }
                    /* falls through */
                    default:
                        if (!hasName) {
                            osParts.name = part;
                        }
                        else {
                            osParts.version += !hasVersion ? part : '-' + part;
                        }
                        break;
                }
            });
        }
        if (hasProject) {
            osParts.url = `https://compute.googleapis.com/compute/v1/projects/${project}/global/images`;
        }
        else {
            osParts.url = this.OS_TO_URL[osParts.name];
        }
        if (!osParts.url) {
            throw new Error([
                'Cannot find ' + os,
                'Expected one of: ' + Object.keys(this.OS_URLS).join(', '),
            ].join('. '));
        }
        return osParts;
    }
    _filterDeprecated(image) {
        return !image.deprecated;
    }
    _sortNewestFirst(imageA, imageB) {
        return imageA.creationTimestamp < imageB.creationTimestamp
            ? 1
            : imageA.creationTimestamp > imageB.creationTimestamp
                ? -1
                : 0;
    }
}
exports.GCEImages = GCEImages;
//# sourceMappingURL=index.js.map